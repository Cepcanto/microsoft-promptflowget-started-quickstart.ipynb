name: promptflow-devkit-test

on:
  schedule:
    - cron: "40 18 * * *" # 2:40 Beijing Time (GMT+8) every day
  pull_request:
    paths:
      - src/promptflow-tracing/**
      - src/promptflow-core/**
      - src/promptflow-devkit/**
      - .github/workflows/promptflow-devkit-test.yml
  workflow_dispatch:

env:
  IS_IN_CI_PIPELINE: "true"
  TRACING_DIRECTORY: ${{ github.workspace }}/src/promptflow-tracing
  CORE_DIRECTORY: ${{ github.workspace }}/src/promptflow-core
  WORKING_DIRECTORY: ${{ github.workspace }}/src/promptflow-devkit
  PROMPTFLOW_DIRECTORY: ${{ github.workspace }}/src/promptflow
  TOOL_DIRECTORY: ${{ github.workspace }}/src/promptflow-tools
  RECORD_DIRECTORY: ${{ github.workspace }}/src/promptflow-recording

jobs:
  devkit_test:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.11']
      fail-fast: false
    # snok/install-poetry need this to support Windows
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - name: set test mode
        run: echo "PROMPT_FLOW_TEST_MODE=$(if [[ "${{ github.event_name }}" == "pull_request" ]]; then echo replay; else echo live; fi)" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: snok/install-poetry@v1
      - name: install test dependency group
        run: |
          set -xe
          poetry install --only test
          poetry run pip install ${{ env.TRACING_DIRECTORY }}
          poetry run pip install ${{ env.CORE_DIRECTORY }}[azureml-serving]
          poetry run pip install ${{ env.WORKING_DIRECTORY }}

          echo "Need to install promptflow to avoid tool dependency issue"
          poetry run pip install ${{ env.PROMPTFLOW_DIRECTORY }}
          poetry run pip install ${{ env.TOOL_DIRECTORY }}
          poetry run pip install -e ${{ env.RECORD_DIRECTORY }}

          poetry run pip show promptflow-tracing
          poetry run pip show promptflow-core
          poetry run pip show promptflow-devkit
          poetry run pip show promptflow-tools
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Azure login (non pull_request workflow)
        if: github.event_name != 'pull_request'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: generate live test resources (non pull_request workflow)
        if: github.event_name != 'pull_request'
        uses: "./.github/actions/step_generate_configs"
        with:
          targetFolder: ${{ env.PROMPTFLOW_DIRECTORY }}
      - name: generate live test resources (pull_request workflow)
        if: github.event_name == 'pull_request'
        working-directory: ${{ env.PROMPTFLOW_DIRECTORY }}
        run: |
          cp ${{ github.workspace }}/src/promptflow/dev-connections.json.example ${{ github.workspace }}/src/promptflow/connections.json
      - name: run devkit tests
        run: |
          poetry run pytest ./tests/sdk_cli_test -p promptflow --cov=promptflow --cov-config=pyproject.toml \
          --cov-report=term --cov-report=html --cov-report=xml -n auto -m "unittest or e2etest" \
          --ignore-glob ./tests/sdk_cli_test/e2etests/test_executable.py \
          --ignore tests/sdk_cli_test/unittests/test_utils.py::TestUtils::test_load_data
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            ${{ env.WORKING_DIRECTORY }}/*.xml
            ${{ env.WORKING_DIRECTORY }}/htmlcov/
      - run: poetry run pip install ${{ env.WORKING_DIRECTORY }}[pyarrow,executable]
      - name: run devkit e2e tests
        run: |
          poetry run pytest -n auto -m "unittest or e2etest" ./tests/sdk_cli_test/e2etests/test_executable.py \
          tests/sdk_cli_test/unittests/test_utils.py::TestUtils::test_load_data
        working-directory: ${{ env.WORKING_DIRECTORY }}

  report:
    needs: [devkit_test]
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
      issues: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: promptflow-core test result
          comment_title: promptflow-core test result
          files: "artifacts/**/test-results.xml"
#     TODO: Enable coverage check after core test fully setup
#      - uses: irongut/CodeCoverageSummary@v1.3.0
#        with:
#          filename: "artifacts/report-ubuntu-latest-py3.9/coverage.xml"
#          badge: true
#          fail_below_min: true
#          format: markdown
#          hide_complexity: true
#          output: both
#          thresholds: 40 60
