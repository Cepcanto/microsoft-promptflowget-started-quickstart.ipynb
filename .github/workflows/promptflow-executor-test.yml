name: promptflow-executor-test
on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
env:
  TENANT_ID: "${{ secrets.TENANT_ID }}"
  CLIENT_ID: "${{ secrets.CLIENT_ID }}"
  CLIENT_SECRET: "${{ secrets.CLIENT_SECRET }}"
  packageSetupType: promptflow_open_source
  testWorkingDirectory: src/promptflow
  coveragePath: src/promptflow/promptflow
jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.filter.outputs.workflows }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          workflows:
            - 'src/promptflow/**'
            - 'scripts/**'
    # run only if 'workflows' files were changed
    - name: workflow tests
      if: steps.filter.outputs.workflows == 'true'
      run: echo "Execute SDK CLI tests"

    # run only if not 'workflows' files were changed
    - name: not workflow tests
      if: steps.filter.outputs.workflows != 'true'
      run: echo "Pass"
  
  executor_tests:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: needs.paths-filter.outputs.output1 == 'true'
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Display Env
      uses: "./.github/actions/pipelines_templates_steps_template_display_environment_variables_step"
    - name: Conda Setup
      uses: "./.github/actions/pipelines_templates_steps_template_create_conda_environment_step"
    - run: |
        echo ${{ env.packageSetupType }}
        echo ${{ env.testWorkingDirectory }}
        echo ${{ env.coveragePath }}
      shell: bash -l {0}
    - name: Build wheel
      uses: "./.github/actions/pipelines_templates_steps_template_sdk_setup_step"
      with:
        setupType: ${{ env.packageSetupType }}
        scriptPath: ${{ env.testWorkingDirectory }}
    - name: Generate Configs
      uses: "./.github/actions/pipelines_templates_steps_template_generate_configs"
      with:
        tenantId: ${{ env.TENANT_ID }}
        clientId: ${{ env.CLIENT_ID }}
        clientSecret: ${{ env.CLIENT_SECRET }}
        targetFolder: ${{ env.testWorkingDirectory }}
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Run Coverage Test
      shell: bash -l {0}
      working-directory: ${{ env.testWorkingDirectory }}
      run: |-
        set -x -e
        export IS_IN_CI_PIPELINE="true"
        az account show
        conda activate release-env
        python "../../scripts/building/run_coverage_tests.py" \
          -p ${{ env.coveragePath }} \
          -t ${{ github.workspace }}/src/promptflow/tests/executor/unittests \
          -l eastus \
          -m "unittest or e2etest" \
          -n 2 \
          --coverage-config ${{ github.workspace }}/src/promptflow/tests/executor/.coveragerc
    - name: Upload pytest test results
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results
        path: ${{ env.testWorkingDirectory }}/test-results.xml
      # Use always() to always run this step to publish test results when there are test failures
    - name: Publish Test Results
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      with:
        files: |
          ${{ env.testWorkingDirectory }}/test-results.xml
    - name: Generate Coverage Report
      if: (success() || failure())
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.19
      continue-on-error: false
      with:
        reports: "${{ env.testWorkingDirectory }}/coverage.xml"
        targetdir: coveragereport_${{ github.run_number }}
        reporttypes: HtmlInline
    - name: Upload CoverageReport
      if: (success() || failure())
      uses: actions/upload-artifact@v3.1.1
      with:
        name: CoverageReport
        path: coveragereport_${{ github.run_number }}
    
