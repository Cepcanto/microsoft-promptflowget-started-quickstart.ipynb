name: promptflow-replay-test
on:
  pull_request:
    paths:
      - src/promptflow/**
      - scripts/building/**
      - .github/workflows/promptflow-replay-test.yml
  workflow_dispatch:
env:
  testWorkingDirectory: ${{ github.workspace }}/src/promptflow
  PYTHONPATH: ${{ github.workspace }}/src/promptflow
  IS_IN_CI_PIPELINE: "true"
  PROMPT_FLOW_TEST_MODE: "replay"
  pyVersion: "3.9"
jobs:
  build:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: Display and Set Environment Variables
      run: |
        env | sort >> $GITHUB_OUTPUT
      id: display_env
      shell: bash -el {0}
    - name: Python Setup - ubuntu-latest - Python Version ${{ env.pyVersion }}
      uses: "./.github/actions/step_create_python_environment"
      with:
        pythonVersion: ${{ env.pyVersion }}
    - name: Build wheel
      uses: "./.github/actions/step_sdk_setup"
      with:
        setupType: promptflow_with_extra
        scriptPath: ${{ env.testWorkingDirectory }}
    - name: Upload Wheel
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: wheel
        path: |
          ${{ github.workspace }}/src/promptflow/dist/*.whl
          ${{ github.workspace }}/src/promptflow-tools/dist/*.whl
  sdk_cli_tests:
    needs: build
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: Display and Set Environment Variables
      run: |
        env | sort >> $GITHUB_OUTPUT
      id: display_env
      shell: bash -el {0}
    - name: Python Setup - ubuntu-latest - Python Version ${{ env.pyVersion }}
      uses: "./.github/actions/step_create_python_environment"
      with:
        pythonVersion: ${{ env.pyVersion }}
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: wheel
        path: artifacts
    - name: Install wheel
      shell: pwsh
      working-directory: artifacts
      run: |
        Set-PSDebug -Trace 1
        pip install -r ${{ github.workspace }}/src/promptflow/dev_requirements.txt
        gci ./promptflow -Recurse | % {if ($_.Name.Contains('.whl')) {python -m pip install "$($_.FullName)[azure]"}}
        gci ./promptflow-tools -Recurse | % {if ($_.Name.Contains('.whl')) {python -m pip install $_.FullName}}
        pip freeze
    - name: Run Test
      shell: pwsh
      working-directory: ${{ env.testWorkingDirectory }}
      run: |
        gci env:* | sort-object name
        cp ${{ github.workspace }}/src/promptflow/dev-connections.json.example ${{ github.workspace }}/src/promptflow/connections.json
        python "../../scripts/building/run_coverage_tests.py" `
        -p promptflow `
        -t ${{ github.workspace }}/src/promptflow/tests/sdk_cli_test `
        -l eastus `
        -m "unittest or e2etest" `
        --coverage-config ${{ github.workspace }}/src/promptflow/tests/sdk_cli_test/.coveragerc
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        check_name: "Replay Test [${{ steps.display_env.outputs.GITHUB_HEAD_REF }}](https://github.com/microsoft/promptflow/actions/workflows/promptflow-replay-test.yml?query=branch:${{ steps.display_env.outputs.GITHUB_HEAD_REF }}++)"
        comment_title: "Replay Test [${{ steps.display_env.outputs.GITHUB_HEAD_REF }}](https://github.com/microsoft/promptflow/actions/workflows/promptflow-replay-test.yml?query=branch:${{ steps.display_env.outputs.GITHUB_HEAD_REF }}++)"
        files: "**/test-results.xml"
    - name: Generate Coverage Report
      if: (success() || failure())
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.25
      continue-on-error: false
      with:
        reports: "${{ env.testWorkingDirectory }}/coverage.xml"
        targetdir: coveragereport_${{ github.run_number }}
        reporttypes: HtmlInline
    - name: Upload CoverageReport
      if: (success() || failure())
      uses: actions/upload-artifact@v3.1.3
      with:
        name: CoverageReport
        path: coveragereport_${{ github.run_number }}

