name: promptflow-replay-test
on:
  pull_request:
    paths:
      - src/promptflow/**
      - scripts/**
  workflow_dispatch:
env:
  testWorkingDirectory: ${{ github.workspace }}/src/promptflow
  PYTHONPATH: ${{ github.workspace }}/src/promptflow
  IS_IN_CI_PIPELINE: "true"
  PF_RECORDING_MODE: "replay"
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Display and Set Environment Variables
      run: |
        export pyVersion="3.9";
        env | sort >> $GITHUB_OUTPUT
      id: display_env
      shell: bash -el {0}
    - name: Python Setup - ${{ matrix.os }} - Python Version ${{ steps.display_env.outputs.pyVersion }}
      uses: "./.github/actions/step_create_python_environment"
      with:
        pythonVersion: ${{ steps.display_env.outputs.pyVersion }}
    - name: Build wheel
      uses: "./.github/actions/step_sdk_setup"
      with:
        setupType: promptflow_with_extra
        scriptPath: ${{ env.testWorkingDirectory }}
    - name: Upload Wheel
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: wheel
        path: |
          ${{ github.workspace }}/src/promptflow/dist/*.whl
          ${{ github.workspace }}/src/promptflow-tools/dist/*.whl
  sdk_cli_tests:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Display and Set Environment Variables
      run: |
        export pyVersion="3.9";
        env | sort >> $GITHUB_OUTPUT
      id: display_env
      shell: bash -el {0}
    - name: Python Setup - ${{ matrix.os }} - Python Version ${{ steps.display_env.outputs.pyVersion }}
      uses: "./.github/actions/step_create_python_environment"
      with:
        pythonVersion: ${{ steps.display_env.outputs.pyVersion }}
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: wheel
        path: artifacts
    - name: Install wheel
      shell: pwsh
      working-directory: artifacts
      run: |
        Set-PSDebug -Trace 1
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install --upgrade nox
        python -m pip install --upgrade mock
        python -m pip install --upgrade pytest-cov
        python -m pip install --upgrade coverage==6.0.1
        python -m pip install --upgrade pytest-forked
        python -m pip install --upgrade pytest-xdist
        python -m pip install --upgrade pytest-timeout
        python -m pip install --upgrade pytest-mock
        python -m pip install --upgrade pytest-nunit
        python -m pip install --upgrade pytest
        python -m pip install --upgrade pydash
        python -m pip install --upgrade wheel
        python -m pip install --upgrade keyrings.alt
        python -m pip install --upgrade beautifulsoup4==4.12.2
        gci ./promptflow -Recurse | % {if ($_.Name.Contains('.whl')) {python -m pip install "$($_.FullName)[azure]"}}
        gci ./promptflow-tools -Recurse | % {if ($_.Name.Contains('.whl')) {python -m pip install $_.FullName}}
        pip freeze
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores
    - name: Run Test
      shell: pwsh
      working-directory: ${{ env.testWorkingDirectory }}
      run: |
        gci env:* | sort-object name
        $env:PYTHONPATH=""
        az account show
        echo '{}' > ${{ github.workspace }}/src/promptflow/connections.json
        pytest ./tests/sdk_cli_test -n auto
