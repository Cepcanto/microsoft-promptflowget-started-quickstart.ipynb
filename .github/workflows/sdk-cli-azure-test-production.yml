# execute tests in src/promptflow/tests/sdk_cli_azure_test with live mode

name: sdk-cli-azure-test-anypath

on:
  schedule:
    - cron: "30 20 * * *"  # 4:30 Beijing Time (GMT+8)

  workflow_dispatch:
    inputs:
      # can leave empty when trigger manually
      # GitHub Actions API for trigger does not return workflow run id
      # there we reference below Stack Overflow solution:
      # https://stackoverflow.com/a/69500478
      # which adds an identifier in workflow run jobs and can be used for filter
      filepath:
        description: file or path you want to trigger a test
        required: true
        default: "./tests/sdk_cli_azure_test"
        type: string



env:
  IS_IN_CI_PIPELINE: "true"
  PROMPT_FLOW_TEST_MODE: "live"
  PROMPT_FLOW_WORKSPACE_NAME: "promptflow-eastus"
  TRACING_DIRECTORY: ${{ github.workspace }}/src/promptflow-tracing
  WORKING_DIRECTORY: ${{ github.workspace }}/src/promptflow-azure
  CORE_DIRECTORY: ${{ github.workspace }}/src/promptflow-core
  DEVKIT_DIRECTORY: ${{ github.workspace }}/src/promptflow-devkit
  PROMPTFLOW_DIRECTORY: ${{ github.workspace }}/src/promptflow
  TOOL_DIRECTORY: ${{ github.workspace }}/src/promptflow-tools
  RECORD_DIRECTORY: ${{ github.workspace }}/src/promptflow-recording


jobs:
  sdk_cli_azure_test_live:
    strategy:
      fail-fast: false
      matrix:
        # replay tests can cover more combinations
        os: [ubuntu-latest]
        pythonVersion: ['3.8', '3.9', '3.10', '3.11']

    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Display and Set Environment Variables
        run: env | sort >> $GITHUB_OUTPUT

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pythonVersion }}
      - uses: snok/install-poetry@v1
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Generate Configs
        uses: "./.github/actions/step_generate_configs"
        with:
          targetFolder: ${{ env.PROMPTFLOW_DIRECTORY }}
      - name: install promptflow-devkit from wheel
        # wildcard expansion (*) does not work in Windows, so leverage python to find and install
        run: |
          poetry run pip install $(python -c "import glob; print(glob.glob('**/promptflow_tracing-*.whl', recursive=True)[0])")
          poetry run pip install $(python -c "import glob; print(glob.glob('**/promptflow_core-*.whl', recursive=True)[0]+'[azureml-serving]')")
          poetry run pip install $(python -c "import glob; print(glob.glob('**/promptflow_devkit-*.whl', recursive=True)[0]+'[executable]')")
          poetry run pip install $(python -c "import glob; print(glob.glob('**/promptflow_azure-*.whl', recursive=True)[0])")
          poetry run pip install $(python -c "import glob; print(glob.glob('**/promptflow-*.whl', recursive=True)[0])")
          poetry run pip install $(python -c "import glob; print(glob.glob('**/promptflow_tools-*.whl', recursive=True)[0])")
          poetry run pip install -e ../promptflow-recording

      - name: Run SDK CLI Azure Test
        shell: pwsh
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          poetry run pytest ${{ inputs.filepath }} -p promptflow --cov=promptflow --cov-config=pyproject.toml `
          --cov-report=term --cov-report=html --cov-report=xml -n auto -m "unittest or e2etest"

