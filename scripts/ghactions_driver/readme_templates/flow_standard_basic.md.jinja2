{{- Steps.setup_target("examples/flows/standard/basic", "Readme.md", "basic_workflow_replace.yml.jinja2", "workflow.yml") -}}
# Basic
A basic standard flow that calls azure open ai with Azure OpenAI connection info stored in environment variables. 

Tools used in this flowï¼š
- `prompt` tool
- custom `python` Tool

Connections used in this flow:
- None

## Prerequisites

Install promptflow sdk and other dependencies:
```bash
{{ Steps.install_dependencies().get_readme_step() }}
```

## Run flow in local

- Prepare your Azure Open AI resource follow this [instruction](https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/create-resource?pivots=web-portal) and get your `api_key` if you don't have one.

- Setup environment variables

Ensure you have put your azure open ai endpoint key in [.env](.env) file. You can create one refer to this [example file](.env.example).

```bash{{ Steps.create_env().get_readme_step() }}
cat .env
```

- Test flow/node
```bash
{{ Steps.bash(command="pf flow test --flow .", comment="test with default input value in flow.dag.yaml").get_readme_step() }}

# test with flow inputs
{{ Steps.bash(command="pf flow test --flow . --inputs text=\"Hello World!\"").get_readme_step() }}

# test node with inputs
{{ Steps.bash(command="pf flow test --flow . --node llm --inputs prompt=\"Write a simple Hello World program that displays the greeting message when executed.\"").get_readme_step() }}
```

- Create run with multiple lines data
```bash
# using environment from .env file (loaded in user code: hello.py)
{{ Steps.bash(command="pf run create --flow . --data ./data.jsonl --stream").get_readme_step() }}
```

- List and show run meta
```bash
# list created run
pf run list

# show specific run detail
pf run show --name "basic_default_20230724_155834_331725"

# show output
pf run show-details --name "basic_default_20230724_155834_331725"

# visualize run in browser
pf run visualize --name "basic_default_20230724_155834_331725"
```
{{ Steps.bash(command="name=\$(pf run list | jq '.[:1] | .[] | .name' | tr -d '\"') && pf run show --name $name && pf run show-details --name $name && pf run visualize --name $name", no_output=True).get_readme_step() }}
## Run flow locally with connection
Storing connection info in .env with plaintext is not safe. We recommend to use `pf connection` to guard secrets like `api_key` from leak.

- Show or create `azure_open_ai_connection`
```bash
# check if connection exists
pf connection show -n azure_open_ai_connection

# create connection from `azure_openai.yml` file
# Override keys with --set to avoid yaml file changes
pf connection create --file azure_openai.yml --set api_key=<your_api_key> api_base=<your_api_base>
```

- Test using connection secret specified in environment variables
```bash
# test with default input value in flow.dag.yaml 
{{ Steps.bash(command="pf flow test --flow . --environment-variables AZURE_OPENAI_API_KEY=${{ '{{' }} secrets.AZURE_OPENAI_API_KEY }} AZURE_OPENAI_API_BASE=${{ '{{' }} secrets.AOAI_API_ENDPOINT }}", demo_command="pf flow test --flow . --environment-variables AZURE_OPENAI_API_KEY='${azure_open_ai_connection.api_key}' AZURE_OPENAI_API_BASE='${azure_open_ai_connection.api_base}'").get_readme_step() }}
```

- Create run using connection secret binding specified in environment variables, see [run.yml](run.yml)
```bash
# create run
{{ Steps.bash(command="pf run create --flow . --data ./data.jsonl --stream --environment-variables AZURE_OPENAI_API_KEY=${{ '{{' }} secrets.AZURE_OPENAI_API_KEY }} AZURE_OPENAI_API_BASE=${{ '{{' }} secrets.AOAI_API_ENDPOINT }}", demo_command="pf run create --flow . --data ./data.jsonl --stream --environment-variables AZURE_OPENAI_API_KEY='${azure_open_ai_connection.api_key}' AZURE_OPENAI_API_BASE='${azure_open_ai_connection.api_base}'").get_readme_step() }}
# create run using yaml file{{ Steps.create_run_yaml().get_readme_step() }}
{{ Steps.bash(command="pf run create --file run.yml --stream").get_readme_step() }}

# show outputs
pf run show-details --name "basic_default_20230724_160138_517171"
```

## Run flow in cloud with connection
- Assume we already have a connection named `azure_open_ai_connection` in workspace.
```bash
# set default workspace
{{ Steps.bash("az account set -s 96aede12-2f73-41cb-b983-6d11a904839b").get_readme_step() }}
{{ Steps.bash("az configure --defaults group=\"promptflow\" workspace=\"promptflow-eastus\"").get_readme_step() }}
```

- Create run
```bash
# run with environment variable reference connection in azureml workspace 
{{ Steps.bash(command="pfazure run create --flow . --data ./data.jsonl --environment-variables AZURE_OPENAI_API_KEY=${{ '{{' }} secrets.AZURE_OPENAI_API_KEY }} AZURE_OPENAI_API_BASE=${{ '{{' }} secrets.AOAI_API_ENDPOINT }} --stream --runtime demo-mir",demo_command="pfazure run create --flow . --data ./data.jsonl --environment-variables AZURE_OPENAI_API_KEY='${azure_open_ai_connection.api_key}' AZURE_OPENAI_API_BASE='${azure_open_ai_connection.api_base}' --stream --runtime demo-mir").get_readme_step() }}
# run using yaml file
{{ Steps.bash(command="pfazure run create --file run.yml --stream --runtime demo-mir").get_readme_step() }}
```

- List and show run meta
```bash
# list created run
pfazure run list -r 3

# show specific run detail
pfazure run show --name "basic_default_20230724_160252_071554"

# show output
pfazure run show-details --name "basic_default_20230724_160252_071554"

# visualize run in browser
pfazure run visualize --name "basic_default_20230724_160252_071554"
```{{ Steps.bash(command="name=\$(pf run list -r 3 | jq '.[:1] | .[] | .name' | tr -d '\"') && pfazure run show --name $name && pfazure run show-details --name $name && pfazure run visualize --name $name", no_output=True).get_readme_step() }}