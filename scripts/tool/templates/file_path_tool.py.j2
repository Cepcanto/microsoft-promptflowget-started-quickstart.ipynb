import asyncio
import importlib
import semantic_kernel as sk

from pathlib import Path
from promptflow import tool
from promptflow.connections import CustomConnection
from promptflow.contracts.types import FilePath


@tool
def {{ function_name }}(connection: CustomConnection, input_file: FilePath, input_str: str) -> str:
    #please handle the logic to import script as module, and retrieve specific class from the module. Just an exmaple here.
    additional_module = importlib.import_module(Path(input_file).stem)
    skill_class = getattr(additional_module, 'MyMathSkill')
    skill_obj = skill_class()

    result = asyncio.run(demo_sqrt(skill_obj, input_str))
    return str(result)


async def demo_sqrt(skill, input_str) -> str:
    kernel = sk.Kernel()
    math_plugin = kernel.import_skill(skill, skill_name="MathPlugin")

    # Run the Sqrt function with the context.
    result = await  kernel.run_async( math_plugin["Sqrt"], input_str=input_str)
    print(result)
    return result