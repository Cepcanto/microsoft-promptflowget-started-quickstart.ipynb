import yaml
import logging
import tempfile
import hashlib
from pathlib import Path


logger = logging.getLogger(__name__)
package_name = "{{ package_name }}"


def list_package_tools(raise_error=False):
    """
    List the meta of all tools in the package.
    The key of meta dict is the module name of tools and value is the meta data of the tool.
    """
    # This function is auto generated by pf CLI, please do not modify manually.

    def is_editable():
        # Check the package is editable.
        import importlib.util

        try:
            module_spec = importlib.util.find_spec(package_name)
            if module_spec is not None and module_spec.origin is not None:
                # Check if the module is installed in editable mode
                if 'site-packages' in module_spec.origin or '.egg-link' in module_spec.origin:
                    return True
        except ModuleNotFoundError:
            pass
        return False

    tools = {}
    meta_cache_file = Path(__file__).parent / "yamls" / "tools_meta.yaml"
    if is_editable() and meta_cache_file.exists():
        logger.debug(f"List tools meta from cache file {meta_cache_file.as_posix()}.")
        # Get tool meta from cache file.
        with open(meta_cache_file, "r") as f:
            tools = yaml.safe_load(f)
    else:
        from promptflow import PFClient

        pf_client = PFClient()
        tools = pf_client.tools._list_tools_in_package(package_name, raise_error=raise_error)

        if is_editable():
            # If the package is not editable, record tool meta in catch file.
            logger.debug(f"Generate tools meta to cache file {meta_cache_file.as_posix()}.")
            meta_cache_file.parent.mkdir(parents=True, exist_ok=True)
            with open(meta_cache_file, "w", encoding="utf-8") as f:
                yaml.safe_dump(tools, f)
    return tools
