# syntax=docker/dockerfile:1
{% if env.image %}
FROM {{env.image}} AS base
{% else %}
{% if show_comment %}
# use mcr.microsoft.com/azureml/openmpi4.1.0-ubuntu20.04:latest? current image is based on Debian 11
{% endif %}
FROM docker.io/continuumio/miniconda3:latest AS base
{% endif %}

WORKDIR /

COPY ./flow /flow

# create conda environment
{% if env.conda_file %}
RUN conda create -f flow/{{env.conda_file}} -q && \
{% else %}
RUN conda create -n {{env.conda_env_name}} python=3.9.16 pip=23.0.1 -q -y && \
{% endif %}
    conda run -n {{env.conda_env_name}} \
{% if env.python_requirements_txt %}
    pip install -r /flow/{{env.python_requirements_txt}} && \
{% else %}
{% if env.sdk_version %}
    pip install promptflow=={{env.sdk_version}} \
{% else %}
    pip install promptflow \
{% endif %}
    promptflow-tools && \
{% endif %}
    conda run -n {{env.conda_env_name}} pip install keyrings.alt && \
    conda run -n {{env.conda_env_name}} pip install gunicorn==20.1.0 && \
    conda run -n {{env.conda_env_name}} pip cache purge && \
    conda clean -a -y

{% if env.setup_sh %}
RUN conda run -n {{env.conda_env_name}} sh /flow/{{ env.setup_sh }}
{% endif %}

COPY ./connections/* /connections/

FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
WORKDIR /app

COPY --from=base / /app

WORKDIR /app/flow
ENV ASPNETCORE_URLS=http://+:8080
ENV DOTNET_USE_POLLING_FILE_WATCHER=true
EXPOSE 8080
ENTRYPOINT ["dotnet", "Promptflow.DotnetService.dll", "-y", "flow.dag.yaml", "-a", ".", "-c", "", "-p", "8080", "-l", "", "-s"]