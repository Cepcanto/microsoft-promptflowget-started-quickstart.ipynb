import base64
import json
import os
import re
import streamlit as st
import imghdr
from pathlib import Path
from streamlit_quill import st_quill
from bs4 import BeautifulSoup, NavigableString, Tag

from promptflow._sdk._utils import print_yellow_warning
from promptflow._sdk._serving.flow_invoker import FlowInvoker
from promptflow.contracts.multimedia import Image

invoker = None
{% set indent_level = 4 %}

def start():
    def clear_chat() -> None:
        st.session_state.messages = []

    def show_image(image):
        st.markdown("`{ `")
        st.image(image)
        st.markdown("`},`")

    def json_dumps(value):
        try:
            return json.dumps(value)
        except Exception:
            return value


    def is_list_contains_rich_text(rich_text):
        result = False
        for item in rich_text:
            if isinstance(item, list):
                result |= is_list_contains_rich_text(item)
            elif isinstance(item, dict):
                result |= is_dict_contains_rich_text(item)
            else:
                # todo: remove this when decode function is ready
                if isinstance(item, Image):
                    result = True
        return result


    def is_dict_contains_rich_text(rich_text):
        result = False
        for rich_text_key, rich_text_value in rich_text.items():
            if isinstance(rich_text_value, list):
                result |= is_list_contains_rich_text(rich_text_value)
            elif isinstance(rich_text_value, dict):
                result |= is_dict_contains_rich_text(rich_text_value)
            elif re.match(Image.MIME_PATTERN, rich_text_key) or isinstance(rich_text_value, Image):       # todo: remove this when decode function is ready
                result = True
        return result


    def render_message(role, message_items):
        {% raw %}
        def item_render_message(value, key=None):
            if key and re.match(Image.MIME_PATTERN, key):
                if not value.startswith("data:image"):
                    show_image(key + ',' + value)
                else:
                    show_image(value)
            elif isinstance(value, Image):  ## todo: remove this when decode function is ready
                show_value = value.to_base64()
                if not show_value.startswith("data:image"):
                    image_bytes = base64.b64decode(show_value)
                    format = imghdr.what(None, image_bytes)
                    prefix = f"data:{format};base64"
                    show_image(prefix + ',' + show_value)
                else:
                    show_image(show_value)
            else:
                st.markdown(f"`{json_dumps(value)},`")

        def list_iter_render_message(message_items):
            if is_list_contains_rich_text(message_items):
                st.markdown("`[`")
                for item in message_items:
                    if isinstance(item, list):
                        list_iter_render_message(item)
                    if isinstance(item, dict):
                        st.markdown("`{ `")
                        dict_iter_render_message(item)
                        st.markdown("`}, `")
                    else:
                        item_render_message(item)
                st.markdown("`]`")
            else:
                st.markdown(f"`{json_dumps(message_items)},`")

        def dict_iter_render_message(message_items):
            for key, value in message_items.items():
                st.markdown(f"`key : {key}`")
                if isinstance(value, list):
                    st.markdown(f"`value : `")
                    list_iter_render_message(value)
                elif isinstance(value, dict):
                    if is_dict_contains_rich_text(value):
                        st.markdown(f"`value : {{`")
                        dict_iter_render_message(value)
                        st.markdown("`}`")
                    else:
                        st.markdown(f"`value: {json_dumps(value)}`")
                else:
                    st.markdown(f"`value : {{`")
                    item_render_message(value, key)
                    st.markdown("`}`")

        with st.chat_message(role):
            dict_iter_render_message(message_items)
        {% endraw %}

    def show_conversation() -> None:
        if "messages" not in st.session_state:
            st.session_state.messages = []
        if st.session_state.messages:
            for role, message_items in st.session_state.messages:
                render_message(role, message_items)


    def submit(**kwargs) -> None:
        st.session_state.messages.append(("user", kwargs))
        with container:
            render_message("user", kwargs)
        response = run_flow(kwargs)
        st.session_state.messages.append(("assistant", response))
        with container:
            render_message("assistant", response)


    def run_flow(data: dict) -> dict:
        global invoker
        if not invoker:
{% if flow_path %}
{{ ' ' * indent_level * 3 }}flow = Path('{{flow_path}}')
{% else %}
{{ ' ' * indent_level * 3 }}flow = Path(__file__).parent / "flow"
{% endif %}
            if flow.is_dir():
                os.chdir(flow)
            else:
                os.chdir(flow.parent)
            invoker = FlowInvoker(flow, connection_provider="local")
        result = invoker.invoke(data)
        print_yellow_warning(f"Result: {result}")
        return result


    def extract_content(node):
        if isinstance(node, NavigableString):
            text = node.strip()
            if text:
                return [text]
        elif isinstance(node, Tag):
            if node.name == 'img':
                prefix, base64_str = node['src'].split(',', 1)
                return [{prefix: base64_str}]
            else:
                result = []
                for child in node.contents:
                    result.extend(extract_content(child))
                return result
        return []


    def parse_html_content(html_content):
        soup = BeautifulSoup(html_content, 'html.parser')
        result = []
        for p in soup.find_all('p'):
            result.extend(extract_content(p))
        return result


    def parse_image_content(image_content, image_type):
        if image_content is not None:
            file_contents = image_content.read()
            image_content = base64.b64encode(file_contents).decode('utf-8')
            prefix = f"data:{image_type};base64"
            return {prefix: image_content}


    st.title("{{flow_name}} APP")
    st.chat_message("assistant").write("Hello, please input following flow inputs and connection keys.")
    container = st.container()
    with container:
        show_conversation()

    with st.form(key='input_form', clear_on_submit=True):
        settings_path = os.path.join(os.path.dirname(__file__), "settings.json")
        if os.path.exists(settings_path):
            with open(settings_path, "r") as file:
                json_data = json.load(file)
            environment_variables = list(json_data.keys())
            for environment_variable in environment_variables:
                secret_input = st.text_input(label=environment_variable, type="password", placeholder=f"Please input {environment_variable} here. If you input before, you can leave it blank.")
                if secret_input != "":
                    os.environ[environment_variable] = secret_input

{% for flow_input, (default_value, value_type) in flow_inputs.items() %}
{% if value_type == "list" %}
{{ ' ' * indent_level * 2 }}st.text('{{flow_input}}')
{{ ' ' * indent_level * 2 }}{{flow_input}} = st_quill(html=True, toolbar=["image"], key='{{flow_input}}')
{% elif value_type == "image" %}
{{ ' ' * indent_level * 2 }}{{flow_input}} = st.file_uploader(label='{{flow_input}}')
{% else %}
{{ ' ' * indent_level * 2 }}{{flow_input}} = st.text_input(label='{{flow_input}}', placeholder='{{default_value}}')
{% endif %}
{% endfor %}

        cols = st.columns(7)
        submit_bt = cols[0].form_submit_button(label='Submit')
        clear_bt = cols[1].form_submit_button(label='Clear')

        if submit_bt:
{% for flow_input, (default_value, value_type) in flow_inputs.items() %}
{% if value_type == "list" %}
{{ ' ' * indent_level * 3 }}{{flow_input}} = parse_html_content({{flow_input}})
{% elif value_type == "image" %}
{{ ' ' * indent_level * 3 }}{{flow_input}} = parse_image_content({{flow_input}}, {{flow_input}}.type if {{flow_input}} else None)
{% endif %}
{% endfor %}

            submit({{flow_inputs_params}})
        if clear_bt:
            clear_chat()

if __name__ == "__main__":
    start()