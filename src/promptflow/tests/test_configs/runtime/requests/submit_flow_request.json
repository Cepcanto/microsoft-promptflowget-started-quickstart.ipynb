{
    "FlowId": "qa_with_bing",
    "FlowRunId": "568d2217-6e93-4684-b2f8-a0d5a4c7b470",
    "SourceFlowRunId": "qa_with_bing",
    "SubmissionData": "{\"flow\": {\"name\": \"qa_with_bing\", \"nodes\": [{\"name\": \"infer_intent\", \"tool\": \"intent\", \"inputs\": {\"question\": \"${flow.question}\", \"max_tokens\": \"256\", \"engine\": \"text-ada-001\", \"temperature\": \"0.7\"}, \"api\": \"completion\", \"provider\": \"AzureOpenAI\", \"connection\": \"aoai_config\"}, {\"name\": \"Bing_search_1\", \"tool\": \"Bing.search\", \"inputs\": {\"query\": \"${infer_intent}\", \"limit\": \"10\"}, \"connection\": \"bing_config\"}, {\"name\": \"combine_search_result_1\", \"tool\": \"combine_search_result\", \"inputs\": {\"search_result\": \"${Bing_search_1}\"}}, {\"name\": \"qa_with_sources\", \"tool\": \"qa\", \"inputs\": {\"contexts\": \"${combine_search_result_1}\", \"question\": \"${flow.question}\", \"max_tokens\": \"256\", \"engine\": \"text-ada-001\", \"temperature\": \"0.5\"}, \"api\": \"completion\", \"provider\": \"AzureOpenAI\", \"connection\": \"aoai_config\"}, {\"name\": \"AzureContentSafety_analyze_text_1\", \"tool\": \"AzureContentSafety.analyze_text\", \"inputs\": {\"text\": \"${qa_with_sources}\"}, \"connection\": \"azure_content_safety_config\"}, {\"name\": \"bot_offense_1\", \"tool\": \"bot_offense\", \"inputs\": {\"result\": \"${AzureContentSafety_analyze_text_1}\"}}], \"inputs\": {\"question\": {\"type\": \"string\"}}, \"outputs\": {\"answer\": {\"type\": \"object\", \"reference\": \"${bot_offense_1}\"}}, \"tools\": [{\"name\": \"intent\", \"description\": \"Infer user intent\", \"type\": \"llm\", \"inputs\": {\"question\": {\"name\": \"question\", \"type\": [\"string\"]}}, \"code\": \"I want you to act as a web browser browsing an imaginary internet. Given an input question, infer user real intent.\\nInput question: What is the name of US first president's wife?\\nAnswer: US first president's wife\\nInput question: I want to find the best restaurants nearby, could you recommend some?\\nAnswer: best restaurants near me\\nInput question: What are Elon Musk's wife doing?\\nAnswer: Elon Musk's wife activities\\nInput question: {{question}}\\nAnswer: \\n\"}, {\"name\": \"Bing.search\", \"type\": \"python\", \"inputs\": {\"query\": {\"type\": [\"string\"]}, \"limit\": {\"type\": [\"int\"], \"default\": \"10\"}}, \"module\": \"promptflow.tools.bing\", \"class_name\": \"Bing\", \"function\": \"search\", \"connection_type\": [\"Bing\"]}, {\"name\": \"combine_search_result\", \"type\": \"python\", \"inputs\": {\"search_result\": {\"name\": \"search_result\", \"type\": [\"object\"]}}, \"class_name\": \"combine_search_result\", \"code\": \"from promptflow import tool\\n@tool\\ndef combine_search_result(search_result):\\n    import json\\n    search_result = json.loads(search_result)\\n\\n    def format(doc: dict):\\n        return f\\\"Content: {doc['Content']}\\\\nSource: {doc['Source']}\\\"\\n\\n    try:\\n        context = []\\n        for data in search_result[\\\"webPages\\\"][\\\"value\\\"]:\\n            context.append({\\n                \\\"Content\\\": data.get(\\\"snippet\\\", \\\"\\\"),\\n                \\\"Source\\\": data.get(\\\"url\\\", \\\"\\\")\\n            })\\n        context_str = \\\"\\\\n\\\\n\\\".join([format(c) for c in context])\\n        return context_str\\n    except Exception as e:\\n        print(\\\"search result is not valid, error: {}\\\".format(e))\\n        return \\\"\\\"\\n\", \"function\": \"combine_search_result\"}, {\"name\": \"qa\", \"description\": \"QA with sources\", \"type\": \"llm\", \"inputs\": {\"question\": {\"name\": \"question\", \"type\": [\"string\"]}, \"contexts\": {\"name\": \"contexts\", \"type\": [\"string\"]}}, \"code\": \"You are a chatbot having a conversation with a human.\\nGiven the following extracted parts of a long document and a question, create a final answer with references (\\\"SOURCES\\\").\\nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\\nALWAYS return a \\\"SOURCES\\\" part in your answer.\\n{{contexts}}\\nHuman: {{question}}\\nChatbot:\"}, {\"name\": \"AzureContentSafety.analyze_text\", \"type\": \"python\", \"inputs\": {\"text\": {\"type\": [\"string\"]}, \"language\": {\"type\": [\"string\"], \"default\": \"eng\"}, \"autocorrect\": {\"type\": [\"bool\"], \"default\": \"True\"}, \"pii\": {\"type\": [\"bool\"], \"default\": \"True\"}, \"classify\": {\"type\": [\"bool\"], \"default\": \"True\"}}, \"module\": \"promptflow.tools.azure_content_safety\", \"class_name\": \"AzureContentSafety\", \"function\": \"analyze_text\", \"connection_type\": [\"AzureContentSafety\"]}, {\"name\": \"bot_offense\", \"type\": \"python\", \"inputs\": {\"result\": {\"name\": \"result\", \"type\": [\"object\"]}}, \"class_name\": \"bot_offense\", \"code\": \"from promptflow import tool\\n@tool\\ndef bot_offense(result: dict) -> str:\\n    if result['classification']['review_recommended']:\\n        return \\\"This content is not suitable for the chatbot to answer.\\\"\\n    return result[\\\"original_text\\\"]\\n\", \"function\": \"bot_offense\"}]}, \"batch_inputs\": [{\"question\": \"When did OpenAI announced their chatgpt api?\"}], \"connections\": {\"aoai_config\": {\"api_key\": \"api-key\", \"api_base\": \"api-endpoint\", \"api_type\": \"azure\", \"api_version\": \"2023-03-15-preview\"}, \"bing_config\": {\"api_key\": \"api-key\"}, \"azure_content_safety_config\": {\"api_key\": \"api-key\", \"endpoint\": \"content-endpoint\", \"api_version\":  \"api-version\"}}, \"name\": \"QA with Bing\", \"description\": \"This is a QA bot with Bing search\"}",
    "RunMode": 0,
    "createdBy": {
        "UserObjectId": "db816ac0-xxxx-472e-a61b-bd7ec9a66348", 
        "UserTenantId": "72f988bf-xxxx-41af-91ab-2d7cd011db47", 
        "UserName": "User Name"
    }, 
    "WorkspaceMsiTokenForStorageResource": "token",
    "environment_variables" : {
        "abc" : "def"
    },
    "BatchDataInput": null
}